// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../formafit/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TRAINER
  CLIENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_MESSAGE
}

// Users table
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CLIENT)
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trainerProfile TrainerProfile?
  clientProfile  ClientProfile?
  bookingsAsTrainer Booking[] @relation("TrainerBookings")
  bookingsAsClient  Booking[] @relation("ClientBookings")
  reviewsAsTrainer  Review[] @relation("TrainerReviews")
  reviewsAsClient   Review[] @relation("ClientReviews")
  notifications     Notification[]
  adminLogs         AdminLog[]
  subscriptions     Subscription[]
  availability      Availability[]
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  payments          Payment[]
  goals             Goal[]
  media             Media[]
  trainerTags       TrainerTag[]

  @@map("users")
}

// Trainer profiles
model TrainerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  experience  Int      @default(0) // years of experience
  skills      String[] // array of skills
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  hourlyRate  Float    @default(0)
  location    String?
  certifications String[]
  specializations String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  subscriptions Subscription[]
  availability Availability[]
  media       Media[]
  trainerTags TrainerTag[]

  @@map("trainer_profiles")
}

// Client profiles
model ClientProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  fitnessGoals String[]
  preferences  Json?    // JSON object for preferences
  height       Float?
  weight       Float?
  age          Int?
  medicalHistory String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  reviews      Review[]
  subscriptions Subscription[]
  payments     Payment[]
  goals        Goal[]

  @@map("client_profiles")
}

// Bookings
model Booking {
  id         String        @id @default(cuid())
  trainerId  String
  clientId   String
  date       DateTime
  startTime  String
  endTime    String
  status     BookingStatus @default(PENDING)
  notes      String?
  location   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  trainer    User          @relation("TrainerBookings", fields: [trainerId], references: [id])
  client     User          @relation("ClientBookings", fields: [clientId], references: [id])
  payments   Payment[]
  reviews    Review[]

  @@map("bookings")
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  trainerId String
  clientId  String
  bookingId String?
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  trainer   User     @relation("TrainerReviews", fields: [trainerId], references: [id])
  client    User     @relation("ClientReviews", fields: [clientId], references: [id])
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@map("reviews")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Admin logs
model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  admin     User     @relation(fields: [adminId], references: [id])

  @@map("admin_logs")
}

// Subscriptions
model Subscription {
  id          String             @id @default(cuid())
  userId      String
  trainerId   String
  packageName String
  sessions    Int
  usedSessions Int               @default(0)
  price       Float
  expiresAt   DateTime
  status      SubscriptionStatus @default(ACTIVE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  user        User               @relation(fields: [userId], references: [id])
  trainer     TrainerProfile     @relation(fields: [trainerId], references: [id])

  @@map("subscriptions")
}

// Availability
model Availability {
  id         String @id @default(cuid())
  trainerId  String
  dayOfWeek  Int    // 0-6 (Sunday-Saturday)
  startTime  String
  endTime    String
  isActive   Boolean @default(true)

  // Relations
  trainer    User   @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@map("availability")
}

// Messages
model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

// Tags
model Tag {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())

  // Relations
  trainerTags TrainerTag[]

  @@map("tags")
}

// Trainer tags (many-to-many)
model TrainerTag {
  id         String @id @default(cuid())
  trainerId  String
  tagId      String

  // Relations
  trainer    User   @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  tag        Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([trainerId, tagId])
  @@map("trainer_tags")
}

// Media
model Media {
  id          String   @id @default(cuid())
  trainerId   String
  type        String   // image, video, pdf
  url         String
  title       String?
  description String?
  uploadedAt  DateTime @default(now())

  // Relations
  trainer     User     @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@map("media")
}

// Goals
model Goal {
  id          String   @id @default(cuid())
  clientId    String
  title       String
  description String?
  targetDate  DateTime?
  isCompleted Boolean  @default(false)
  progress    Int      @default(0) // percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client      User     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Payments
model Payment {
  id        String        @id @default(cuid())
  bookingId String?
  userId    String
  amount    Float
  currency  String        @default("USD")
  status    PaymentStatus @default(PENDING)
  method    String?       // stripe, paypal, etc.
  transactionId String?
  createdAt DateTime      @default(now())

  // Relations
  booking   Booking?      @relation(fields: [bookingId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("payments")
}
